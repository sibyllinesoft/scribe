"""
Test hermetic boot verification functionality.
"""

import json
import pytest
from pathlib import Path
from unittest.mock import patch, MagicMock

# Adjust path to import from project
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from scripts.sign_transcript import TranscriptSigner
except ImportError:
    pytest.skip("Sign transcript module not available", allow_module_level=True)


class TestTranscriptSigner:
    """Test boot transcript signing functionality."""
    
    def test_content_hash_generation(self, tmp_path):
        """Test that content hash generation is deterministic."""
        signer = TranscriptSigner()
        
        test_data = {
            "metadata": {"version": "1.0.0"},
            "phases": [{"name": "test", "status": "success"}]
        }
        
        hash1 = signer.generate_content_hash(test_data)
        hash2 = signer.generate_content_hash(test_data)
        
        assert hash1 == hash2
        assert len(hash1) == 64  # SHA-256 hex
        
    def test_environment_hash_generation(self, tmp_path):
        """Test environment file hashing."""
        signer = TranscriptSigner()
        
        env_file = tmp_path / "test_env.txt"
        env_file.write_text("PYTHON_VERSION=3.12\nHOSTNAME=test")
        
        hash_value = signer.generate_environment_hash(env_file)
        
        assert len(hash_value) == 64
        assert hash_value.isalnum()
    
    def test_signature_creation(self, tmp_path):
        """Test basic signature creation."""
        signer = TranscriptSigner()
        
        transcript_data = {
            "boot_session": "test-session",
            "phases": [{"name": "test", "status": "success"}],
            "container_tag": "packrepo:test"
        }
        
        transcript_file = tmp_path / "test_transcript.json"
        transcript_file.write_text(json.dumps(transcript_data))
        
        payload = signer.create_signature_payload(transcript_file)
        
        assert "content_hash" in payload
        assert "timestamp" in payload
        assert "container_tag" in payload
        assert payload["container_tag"] == "packrepo:test"
    
    def test_sign_and_verify_cycle(self, tmp_path):
        """Test complete sign and verify cycle."""
        signer = TranscriptSigner()
        
        # Create test transcript
        transcript_data = {
            "boot_session": "test-session",
            "phases": [{"name": "test", "status": "success"}],
            "container_tag": "packrepo:test",
            "success": True
        }
        
        transcript_file = tmp_path / "test_transcript.json"
        transcript_file.write_text(json.dumps(transcript_data, indent=2))
        
        # Sign transcript
        signed_file = signer.sign_transcript(transcript_file)
        
        assert signed_file.exists()
        
        # Verify signature
        verification_result = signer.verify_signature(signed_file)
        
        assert verification_result is True
    
    def test_signature_tampering_detection(self, tmp_path):
        """Test that signature detects tampering."""
        signer = TranscriptSigner()
        
        # Create and sign transcript
        transcript_data = {"phases": [{"name": "test", "status": "success"}]}
        transcript_file = tmp_path / "test_transcript.json"
        transcript_file.write_text(json.dumps(transcript_data))
        
        signed_file = signer.sign_transcript(transcript_file)
        
        # Tamper with signed file
        signed_data = json.loads(signed_file.read_text())
        signed_data['transcript']['phases'][0]['status'] = 'failed'  # Tamper
        signed_file.write_text(json.dumps(signed_data))
        
        # Verification should fail
        verification_result = signer.verify_signature(signed_file)
        
        assert verification_result is False


class TestHermeticBootVerification:
    """Test hermetic boot verification process."""
    
    def test_boot_transcript_structure(self):
        """Test that boot transcript has expected structure."""
        expected_fields = [
            'boot_session', 'timestamp', 'hostname', 
            'user', 'pwd', 'git_commit', 'phases'
        ]
        
        # This would be generated by actual boot process
        sample_transcript = {
            'boot_session': 'test-uuid',
            'timestamp': '2024-01-01T00:00:00Z',
            'hostname': 'test-host',
            'user': 'test-user', 
            'pwd': '/app',
            'git_commit': 'abc123' * 7,  # 42 chars
            'git_dirty': False,
            'phases': []
        }
        
        for field in expected_fields:
            assert field in sample_transcript
    
    def test_phase_structure(self):
        """Test that boot phases have expected structure."""
        sample_phase = {
            'name': 'environment_validation',
            'start_time': '2024-01-01T00:00:00Z',
            'end_time': '2024-01-01T00:01:00Z', 
            'duration_seconds': 60,
            'error_count': 0,
            'status': 'success'
        }
        
        required_fields = ['name', 'start_time', 'end_time', 'status']
        
        for field in required_fields:
            assert field in sample_phase
        
        assert sample_phase['status'] in ['success', 'failure']


if __name__ == '__main__':
    pytest.main([__file__])